Trac #5457: This patch restructures the implementation of symmetric functions in sage
Trac #5457: This patch restructures the implementation of symmetric functions in sage

The new implementation makes use of multiple realizations and the category
framework. The new access to symmetric functions is via
{{{
sage: Sym = SymmetricFunctions(QQ)
}}}

Further new features that are implemented:

- The ring of symmetric functions is now endowed with a Hopf algebra structure.
  The coproduct and antipode are implemented (which were missing before).

- A tutorial on how to use symmetric functions in sage is included at the
  beginning of sf.py which is also accessible via
{{{
sage: SymmetricFunctions??
}}}

- Symmetric functions should now work a lot better with respect to
  specializing parameters like `q` and `t` for Hall-Littlewood, Jack
  and Macdonald symmetric functions. Certain functionalities before
  this change were broken or not possible.

- Documentation was added to LLT polynomials (which had very sparse documentation
  previously).

- The `k`-bounded subspace of the ring of symmetric function was implemented.
  The `k`-Schur functions now live in the `k`-bounded subspace rather than
  in the ring of symmetric functions as before.

This patch gained tremendously by the tutorial on symmetric functions written
by Jason Bandlow, a draft on the `k`-bounded subspace by
Jason Bandlow, and code multiple realizations written by Franco Saliola.
